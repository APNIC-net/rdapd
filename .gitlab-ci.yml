image: alpine:latest

variables:
  POSTGRES_USER: user
  POSTGRES_PASSWORD: testing-password
  POSTGRES_ENABLED: "true"
  POSTGRES_DB: $CI_ENVIRONMENT_SLUG
  KUBERNETES_VERSION: 1.9.1
  HELM_VERSION: 2.8.2
  CODECLIMATE_VERSION: 0.72.0
  HTTP_PROXY: ${HTTP_PROXY}
  HTTPS_PROXY: ${HTTPS_PROXY}
  NO_PROXY: ${NO_PROXY}

stages:
  - package
  - test
  - review
  - performance
  - production
  - cleanup

.build_test_docker_image:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - build_and_push_docker_image
  only:
    - branches

.fake_build:
  variables:
    DOCKER_DRIVER: overlay2
    HTTP_PROXY: ${HTTP_PROXY}
    HTTPS_PROXY: ${HTTPS_PROXY}
    NO_PROXY: ${NO_PROXY}
  stage: test
  image: docker:stable
  allow_failure: true
  services:
    - name: $CI_REGISTRY/ci/dind:0.0.1
  script:
    - setup_docker
    - fake_build
  only:
    - branches

.unit_tests:
  stage: test
  image: maven:3.5-jdk-8-alpine
  script:
    - setup_maven
    - mvn test
  only:
    - branches

.publish_to_test:
  stage: test
  image: $CI_REGISTRY/ci/alpine-kubectl-helm:1.0.1
  script:
    - publish_chart tst
  only:
    - branches

.publish_to_prod:
  stage: production
  image: $CI_REGISTRY/ci/alpine-kubectl-helm:1.0.1
  script:
    - publish_chart prod
  when: manual

.codequality:
  variables:
    DOCKER_DRIVER: overlay2
    HTTP_PROXY: ${HTTP_PROXY}
    HTTPS_PROXY: ${HTTPS_PROXY}
    NO_PROXY: ${NO_PROXY}
  stage: test
  image: $CI_REGISTRY/docker:stable
  allow_failure: true
  services:
    - name: $CI_REGISTRY/ci/dind:0.0.1
  script:
    - setup_docker
    - code_quality
  artifacts:
    paths: [gl-code-quality-report.json]
  only:
    - branches
  except:
    variables:
      - $CODE_QUALITY_DISABLED

sast:
  image: docker:stable
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - $CI_REGISTRY/ci/dind:0.0.1
  script:
    - setup_docker
    - sast
  artifacts:
    paths: [gl-sast-container-report.json]

.review:
  stage: review
  image: $CI_REGISTRY/ci/alpine-kubectl-helm:1.0.1
  variables:
    HTTP_PROXY: ${HTTP_PROXY}
    HTTPS_PROXY: ${HTTPS_PROXY}
    NO_PROXY: ${NO_PROXY}
  script:
    - configure_cluster ${CI_PROJECT_NAME}-${CI_BUILD_REF_SLUG}
    - initialise_helm
    - ensure_namespace
    - create_secret
    - deploy
    - persist_environment_url
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: ${TEST_CLUSTER_SERVER}/api/v1/namespaces/${CI_PROJECT_NAME}-${CI_BUILD_REF_SLUG}/services/${CI_ENVIRONMENT_SLUG}-rdapd:8080/proxy/
    on_stop: cleanup
  artifacts:
    paths: [environment_url.html]
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - master

.performance:
  stage: performance
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
    HTTP_PROXY: ${HTTP_PROXY}
    HTTPS_PROXY: ${HTTPS_PROXY}
    NO_PROXY: ${NO_PROXY}

  allow_failure: true
  services:
    - $CI_REGISTRY/ci/dind:0.0.1
  script:
    - setup_docker
    - performance
  artifacts:
    paths:
    - performance.json
  only:
    refs:
      - branches
  except:
    - master

cleanup:
  stage: cleanup
  image: alpine-kubectl-helm:1.0.0
  variables:
    GIT_STRATEGY: none
  script:
    - delete_charts
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - master
# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x
  auto_database_url=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${CI_ENVIRONMENT_SLUG}-postgres:5432/${POSTGRES_DB}
  export DATABASE_URL=${DATABASE_URL-$auto_database_url}
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  export CI_APPLICATION_TAG=$CI_PIPELINE_ID.$CI_COMMIT_SHA
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}
  export KUBE_NAMESPACE=${CI_PROJECT_NAME}-${CI_BUILD_REF_SLUG}
  export TILLER_NAMESPACE='tiller'

  function sast() {
    case "$CI_SERVER_VERSION" in
      *-ee)

        # Deprecation notice for CONFIDENCE_LEVEL variable
        if [ -z "$SAST_CONFIDENCE_LEVEL" -a "$CONFIDENCE_LEVEL" ]; then
          SAST_CONFIDENCE_LEVEL="$CONFIDENCE_LEVEL"
          echo "WARNING: CONFIDENCE_LEVEL is deprecated and MUST be replaced with SAST_CONFIDENCE_LEVEL"
        fi

        docker run --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}" \
                   --volume "$PWD:/code" \
                   --volume /var/run/docker.sock:/var/run/docker.sock \
                   "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
        ;;
      *)
        echo "GitLab EE is required"
        ;;
    esac
  }

  function code_quality() {
  echo $DOCKER_CONFIG
  docker run --env SOURCE_CODE="$(pwd)" \
          --env HTTP_PROXY=$HTTP_PROXY \
          --env HTTPS_PROXY=$HTTPS_PROXY \
          --env NO_PROXY=$NO_PROXY \
          --volume $(pwd):/code \
          --volume /var/run/docker.sock:/var/run/docker.sock \
          "acr2.tst.apnic.net/alex/codequality:0.0.3" /code
  }

  function deploy() {
    name=$(get_name)
    replicas="1"
    postgres_enabled="$POSTGRES_ENABLED"
    test_name="$(test_dep_name $name)"
    echo "Starting test chart install"

    if [[ -n $(helm ls -q "^$test_name$") ]]; then
      echo "helm delete --purge \"$test_name\""
      helm delete --purge "$test_name"
      echo "$test_name deleted"
    fi
    helm upgrade --install \
      --tiller-namespace=$TILLER_NAMESPACE \
      --force \
      --wait \
      --namespace="$KUBE_NAMESPACE" \
      --version="$CI_PIPELINE_ID-$CI_JOB_ID" \
      $test_name \
      helm/test/

    echo "Starting rdapd chart install"

    if [[ -n $(helm ls -q "^$name$") ]]; then
      echo "helm delete --purge \"$name\""
      helm delete --purge "$name" &>/dev/null
      echo "$name deleted"
    fi

    helm upgrade --install \
      --tiller-namespace=$TILLER_NAMESPACE \
      --force \
      --wait \
      --set releaseOverride="$CI_ENVIRONMENT_SLUG" \
      --set image.repository="$CI_REGISTRY/$CI_REGISTRY_PATH/$CI_COMMIT_REF_SLUG" \
      --set image.tag="$CI_APPLICATION_TAG" \
      --set image.pullPolicy=IfNotPresent \
      --set application.database_url="$DATABASE_URL" \
      --set replicaCount="$replicas" \
      --set postgresql.enabled="$postgres_enabled" \
      --set postgresql.nameOverride="postgres" \
      --set postgresql.postgresUser="$POSTGRES_USER" \
      --set postgresql.postgresPassword="$POSTGRES_PASSWORD" \
      --set postgresql.postgresDatabase="$POSTGRES_DB" \
      --namespace="$KUBE_NAMESPACE" \
      --version="$CI_PIPELINE_ID-$CI_JOB_ID" \
      --values=helm/test-env-values.yaml \
      "$name" \
      helm/rdapd/
  }

  function configure_cluster() {
    echo "Configuring cluster"
    echo $TEST_CLUSTER_CA_BUNDLE > test_cluster_ca.crt
    kubectl config set-cluster --kubeconfig=ci ci --server=$TEST_CLUSTER_SERVER --insecure-skip-tls-verify=true
    kubectl config set-context  --kubeconfig=ci ci --namespace=$1 --cluster=ci --user=ci
    kubectl config set-credentials --kubeconfig=ci ci --token=$KUBE_TOKEN
    kubectl config use-context --kubeconfig=ci ci
    export  KUBECONFIG=ci
  }

  function test_dep_name() {
    local name=$1
    echo "$name-test-env"
  }

  function get_name() {
    echo $CI_ENVIRONMENT_SLUG
  }

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
    docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  }

  function setup_maven() {
    export MAVEN_MIRROR_OF=$MAVEN_MIRROR_OF
    export MAVEN_MIRROR_URL=$MAVEN_MIRROR_URL
    mkdir /root/.m2/
    cp gitlab-ci/maven_settings.xml /root/.m2/settings.xml
  }

  function initialise_helm() {
    chart_dir=helm/rdapd
    helm init --client-only --skip-refresh
    helm dependency update "$chart_dir/"
    helm dependency build "$chart_dir/"
  }

  function ensure_namespace() {
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  }

  function fake_build() {
    docker pull acr2.tst.apnic.net/rdap/rdapd/ci-tests:1942.3ad6a0224f645d708c6f433ed62ac99f8a084d19
    docker tag acr2.tst.apnic.net/rdap/rdapd/ci-tests:1942.3ad6a0224f645d708c6f433ed62ac99f8a084d19 $CI_REGISTRY/$CI_REGISTRY_PATH/$CI_COMMIT_REF_SLUG:$CI_APPLICATION_TAG
    docker push $CI_REGISTRY/$CI_REGISTRY_PATH/$CI_COMMIT_REF_SLUG:$CI_APPLICATION_TAG
  }

  function build_and_push_docker_image() {
    echo "Creating and pusing docker image $CI_REGISTRY/$CI_REGISTRY_PATH/$CI_COMMIT_REF_SLUG:$CI_APPLICATION_TAG"
    echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    cat gitlab-ci/registry.crt  >> /kaniko/ssl/certs/ca-certificates.crt
    /kaniko/executor --context $CI_PROJECT_DIR --build-arg MAVEN_MIRROR_OF=$MAVEN_MIRROR_OF \
    --build-arg MAVEN_MIRROR_URL=$MAVEN_MIRROR_URL --build-arg HTTP_PROXY=$HTTP_PROXY \
    --build-arg HTTPS_PROXY=$HTTPS_PROXY --build-arg NO_PROXY=$NO_PROXY \
    --dockerfile $CI_PROJECT_DIR/Dockerfile \
    --destination $CI_REGISTRY/$CI_REGISTRY_PATH/$CI_COMMIT_REF_SLUG:$CI_APPLICATION_TAG
  }

  #Takes one argument: the chart museum server (tst or prd)
  function publish_chart() {
    mkdir /root/helm_package/
    helm package -d /root/helm_package/ helm/rdapd
    cd /root/helm_package
    echo "curl -s --data-binary \"@$(ls -A1 /root/helm_package/)\" $CHART_API_URI/api/$1/charts"
    curl -s --data-binary "@$(ls -A1 /root/helm_package/)" $CHART_API_URI/api/$1/charts
  }

  function create_secret() {
    echo "Create secret..."

    kubectl create secret -n "$KUBE_NAMESPACE" \
      docker-registry gitlab-registry \
      --docker-server="$CI_REGISTRY" \
      --docker-username="$CI_REGISTRY_USER" \
      --docker-password="$CI_REGISTRY_PASSWORD" \
      --docker-email="$GITLAB_USER_EMAIL" \
      -o yaml --dry-run | kubectl replace -n "$KUBE_NAMESPACE" --force -f -
  }

  function performance() {
    export CI_ENVIRONMENT_URL=line="$(head -1 environment_url.html)"
    echo $CI_ENVIRONMENT_URL
    mkdir gitlab-exporter
    cp gitlab-ci/performance.js gitlab-exporter/index.js
    #wget -O gitlab-exporter/index.js https://gitlab.com/gitlab-org/gl-performance/raw/10-3/index.js
    mkdir sitespeed-results
    if [ -f .gitlab-urls.txt ]
    then
      sed -i -e 's@^@'"$CI_ENVIRONMENT_URL"'@' .gitlab-urls.txt
      docker run --shm-size=1g --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io:6.0.3 --plugins.add ./gitlab-exporter --outputFolder sitespeed-results .gitlab-urls.txt
    else
      docker run --shm-size=1g --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io:6.0.3 --plugins.add ./gitlab-exporter --outputFolder sitespeed-results "$CI_ENVIRONMENT_URL"
    fi
    mv sitespeed-results/data/performance.json performance.json
  }

  function persist_environment_url() {
    echo "Application is available here: $CI_ENVIRONMENT_URL"
    echo "$CI_ENVIRONMENT_URL" > environment_url.html
    echo ""
    echo "<script>window.location.replace(\"$CI_ENVIRONMENT_URL\")</script>" >> environment_url.html
    echo $CI_ENVIRONMENT_URL > environment_url.txt
  }

  function delete_charts() {
    name=$(get_name)
    if [[ -n "$(helm ls -q "^$name$")" ]]; then
      helm delete --purge "$name"
      helm delete --purge "$(test_dep_name $name)"
    fi
  }

before_script:
  - *auto_devops
